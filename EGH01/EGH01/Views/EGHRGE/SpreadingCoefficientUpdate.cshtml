@using EGH01.Core;
@using EGH01.Models.EGH;
@using EGH01DB.Primitives;
@using EGH01DB.Types;
@model EGH01DB.Primitives.SpreadingCoefficient
@{
    Layout = "~/Views/Shared/EGHLayout.cshtml";
    Menu head = new Menu(
                          new Menu.MenuItem("Создать", "SpreadingCoefficient.Create", false),
                          new Menu.MenuItem("Excel-формат", "SpreadingCoefficient.Excel", false)
                        );

    Menu delete = new Menu(
                          new Menu.MenuItem("Изменить", "SpreadingCoefficient.Update.Update", true),
                          new Menu.MenuItem("Отказаться", "SpreadingCoefficient.Update.Cancel", true)
                        );
    EGH01DB.RGEContext db = new EGH01DB.RGEContext();
    {
        List<EGH01DB.Types.GroundType> list_groundType = new List<EGH01DB.Types.GroundType>();
        List<SelectListItem> list = ViewBag.list_groundType = new List<SelectListItem>();

        Helper.GetListGroundType(db, ref list_groundType);
        list_groundType.ForEach(o => ViewBag.list_groundType.Add(new SelectListItem { Text = o.name, Value = o.type_code.ToString() }));
        
        if (Model.ground_type != null)
        {
            SelectListItem si = list.FirstOrDefault(s => s.Value == Model.ground_type.type_code.ToString());
            si.Selected = true;
        }

    }

    {
        List<EGH01DB.Types.PetrochemicalType> list_petrochemicalType = new List<EGH01DB.Types.PetrochemicalType>();
        List<SelectListItem> list = ViewBag.list_petrochemicalType = new List<SelectListItem>();

        Helper.GetListPetrochemicalType(db, ref list_petrochemicalType);
        list_petrochemicalType.ForEach(o => ViewBag.list_petrochemicalType.Add(new SelectListItem { Text = o.name, Value = o.code_type.ToString() }));

        if (Model.petrochemical_type != null)
        {
            SelectListItem s = list.FirstOrDefault(si => si.Value == Model.petrochemical_type.code_type.ToString());
            s.Selected = true;
        }

    
    }
}

@Html.Partial("_TypeHeadMenu", new TypeViewMenu { Controller = "EGHRGE", Action = "SpreadingCoefficient", Menu = head })

@using (Html.BeginForm("SpreadingCoefficientUpdate", "EGHRGE"))
{

        <div class="box">
        <div class="boxdata">
            <p>
                <label class="boxdata-label-30">Тип нефтепродукта</label>@Html.DropDownList("list_petrochemicalType")  
            </p>  
            <p>
                <label class="boxdata-label-30">Тип грунта</label>@Html.DropDownList("list_groundType")
                <input type="hidden" value="@Model.code.ToString()" name="code">
            </p>   
            <p>
                <label class="boxdata-label-30">Диапазон значений объема пролива, м<sup><small>3</small></sup></label>
                <input class="boxdata-input-20" type="number" name="min_volume" step="0.1" min="0" value="@Model.min_volume.ToString("0.0").Replace(',', '.')" />
                <input class="boxdata-input-20" type="number" name="max_volume" step="0.1" min="0" value="@Model.max_volume.ToString("0.0").Replace(',', '.')" />
            </p>
            <p>
                <label class="boxdata-label-30">Диапазон значений гидравлического уклона</label>
                <input class="boxdata-input-20" type="number" name="min_angle" min="0" step="0.1" max="90" value="@Model.min_angle.ToString("0.0").Replace(',', '.')" />
                <input class="boxdata-input-20" type="number" name="max_angle" min="0" step="0.1" max="90" value="@Model.max_angle.ToString("0.0").Replace(',', '.')" />
            </p>
            <p>
                <label class="boxdata-label-30">Коэффициент растекания, 1/м</label>
                <input class="boxdata-input-20" type="number" name="koef" min="0.1" step="0.1" max="50" value="@Model.koef.ToString("0.0").Replace(',', '.')" />
            </p>
               

            </div>
        @Html.Partial("_TypeLineMenu", delete)

    </div>
}